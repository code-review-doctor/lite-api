# Generated by Django 3.1.8 on 2021-04-23 10:47

from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import uuid

from api.core.helpers import add_months
from api.licences.enums import LicenceStatus
from api.licences.helpers import get_licence_reference_code


def set_licence_reference(apps, schema_editor):
    Licence = apps.get_model("licences", "Licence")
    for licence in Licence.objects.all():
        if not licence.reference_code:
            licence.reference_code = get_licence_reference_code(licence.case.reference_code)
            licence.save()


def convert_licence_status(apps, schema_editor):
    Licence = apps.get_model("licences", "Licence")

    for licence in Licence.objects.all():
        if licence.is_complete:
            licence.status = LicenceStatus.ISSUED
        else:
            licence.status = LicenceStatus.DRAFT
        licence.save()


def reverse_licence__status(apps, schema_editor):
    Licence = apps.get_model("licences", "Licence")

    for licence in Licence.objects.all():
        if licence.status == LicenceStatus.ISSUED:
            licence.is_complete = True
        else:
            licence.is_complete = False
        licence.save()


def convert_good_on_application_to_good_on_licence(apps, schema_editor):
    GoodOnApplication = apps.get_model("applications", "GoodOnApplication")
    GoodOnLicence = apps.get_model("licences", "GoodOnLicence")
    Licence = apps.get_model("licences", "Licence")

    for good_on_application in GoodOnApplication.objects.filter(licenced_quantity__isnull=False):
        licence = good_on_application.application.licence.first()
        if licence:
            GoodOnLicence.objects.create(
                good=good_on_application,
                licence=licence,
                usage=good_on_application.usage,
                quantity=good_on_application.licenced_quantity,
                value=good_on_application.licenced_value,
            )


def reverse_good_on_application_to_good_on_licence(apps, schema_editor):
    pass


def migrate(apps, schema_editor):
    Licence = apps.get_model("licences", "Licence")
    licences = Licence.objects.all()

    for licence in licences:
        licence.end_date = add_months(licence.start_date, licence.duration, "%Y-%m-%d")
        licence.save()


def reverse_migrate(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    replaces = [('licences', '0001_initial'), ('licences', '0002_licence_decisions'), ('licences', '0003_licence_reference_code'), ('licences', '0004_auto_20200616_0836'), ('licences', '0005_auto_20200616_0837'), ('licences', '0006_licence_sent_at'), ('licences', '0007_licence_status'), ('licences', '0008_map_licence_status'), ('licences', '0009_licence_remove_is_complete'), ('licences', '0010_goodonlicence'), ('licences', '0011_map_goodonapplication_to_goodonlicence'), ('licences', '0012_auto_20200707_0820'), ('licences', '0013_auto_20200709_1520'), ('licences', '0014_licence_expiry_and_end_date'), ('licences', '0015_auto_20200715_1529'), ('licences', '0016_auto_20200717_0952'), ('licences', '0017_auto_20200717_1117'), ('licences', '0018_auto_20200717_1526')]

    initial = True

    dependencies = [
        ('decisions', '0001_initial'),
        ('applications', '0025_auto_20200414_1617'),
        ('applications', '0023_delete_licence'),
    ]

    operations = [
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created_at')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='updated_at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateField()),
                ('duration', models.PositiveSmallIntegerField()),
                ('is_complete', models.BooleanField(default=False)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licence', to='applications.baseapplication')),
                ('decisions', models.ManyToManyField(related_name='licence', to='decisions.Decision')),
                ('reference_code', models.CharField(default=None, editable=False, max_length=30, null=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=set_licence_reference,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='licence',
            name='reference_code',
            field=models.CharField(editable=False, max_length=30, unique=True),
        ),
        migrations.AddField(
            model_name='licence',
            name='sent_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='licence',
            name='status',
            field=models.CharField(choices=[('issued', 'Issued'), ('reinstated', 'Reinstated'), ('revoked', 'Revoked'), ('surrendered', 'Surrendered'), ('draft', 'Draft'), ('cancelled', 'Cancelled'), ('refused', 'Refused')], default='draft', max_length=32),
        ),
        migrations.RunPython(
            code=convert_licence_status,
            reverse_code=reverse_licence__status,
        ),
        migrations.RemoveField(
            model_name='licence',
            name='is_complete',
        ),
        migrations.CreateModel(
            name='GoodOnLicence',
            fields=[
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created_at')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='updated_at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('usage', models.FloatField(default=0)),
                ('quantity', models.FloatField()),
                ('value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licence', to='applications.goodonapplication')),
                ('licence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goods', related_query_name='goods', to='licences.licence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=convert_good_on_application_to_good_on_licence,
            reverse_code=reverse_good_on_application_to_good_on_licence,
        ),
        migrations.AlterField(
            model_name='licence',
            name='status',
            field=models.CharField(choices=[('issued', 'Issued'), ('reinstated', 'Reinstated'), ('revoked', 'Revoked'), ('surrendered', 'Surrendered'), ('draft', 'Draft'), ('cancelled', 'Cancelled')], default='draft', max_length=32),
        ),
        migrations.CreateModel(
            name='HMRCIntegrationUsageUpdate',
            fields=[
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created_at')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='updated_at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RenameField(
            model_name='licence',
            old_name='sent_at',
            new_name='hmrc_integration_sent_at',
        ),
        migrations.AlterField(
            model_name='licence',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licences', to='applications.baseapplication'),
        ),
        migrations.AddField(
            model_name='licence',
            name='hmrc_integration_usage_updates',
            field=models.ManyToManyField(related_name='licences', to='licences.HMRCIntegrationUsageUpdate'),
        ),
        migrations.AlterField(
            model_name='licence',
            name='status',
            field=models.CharField(choices=[('issued', 'Issued'), ('reinstated', 'Reinstated'), ('revoked', 'Revoked'), ('surrendered', 'Surrendered'), ('exhausted', 'Exhausted'), ('expired', 'Expired'), ('draft', 'Draft'), ('cancelled', 'Cancelled')], default='draft', max_length=32),
        ),
        migrations.AddField(
            model_name='licence',
            name='end_date',
            field=models.DateField(null=True),
        ),
        migrations.RunPython(
            code=migrate,
            reverse_code=reverse_migrate,
        ),
        migrations.AlterField(
            model_name='licence',
            name='end_date',
            field=models.DateField(),
        ),
        migrations.RenameField(
            model_name='licence',
            old_name='application',
            new_name='case',
        ),
        migrations.AlterField(
            model_name='licence',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licences', to='cases.case'),
        ),
        migrations.AlterField(
            model_name='licence',
            name='status',
            field=models.CharField(choices=[('issued', 'Issued'), ('reinstated', 'Reinstated'), ('revoked', 'Revoked'), ('surrendered', 'Surrendered'), ('suspended', 'Suspended'), ('draft', 'Draft'), ('cancelled', 'Cancelled')], default='draft', max_length=32),
        ),
        migrations.AlterField(
            model_name='licence',
            name='status',
            field=models.CharField(choices=[('issued', 'Issued'), ('reinstated', 'Reinstated'), ('revoked', 'Revoked'), ('surrendered', 'Surrendered'), ('suspended', 'Suspended'), ('exhausted', 'Exhausted'), ('expired', 'Expired'), ('draft', 'Draft'), ('cancelled', 'Cancelled')], default='draft', max_length=32),
        ),
    ]
